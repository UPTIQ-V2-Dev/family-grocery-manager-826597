// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  email           String        @unique
  name            String?
  password        String
  role            Role          @default(USER)
  isEmailVerified Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Token           Token[]
  items           Item[]
  stockUpdates    StockUpdate[]
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

enum Role {
  USER
  ADMIN
}

model Item {
  id            String        @id @default(cuid())
  name          String
  category      String
  brand         String?
  quantity      Float
  unit          String
  stockLevel    String
  minStockLevel Float
  price         Float?
  lastUpdated   DateTime      @default(now())
  updatedBy     String
  notes         String?
  imageUrl      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  userId        Int
  stockUpdates  StockUpdate[]
}

model StockUpdate {
  id          String   @id @default(cuid())
  itemId      String
  oldQuantity Float
  newQuantity Float
  updatedBy   String
  notes       String?
  createdAt   DateTime @default(now())
  item        Item     @relation(fields: [itemId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}
